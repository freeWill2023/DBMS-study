ID: st04
PW: st04
host name : 125.141.133.87
port : 1521
SID 접속식별자 : xe
----------------------------------------------------------

--EMP schema 스키마
EMPLOYEE_ID	사번
FIRST_NAME
LAST_NAME
EMAIL
PHONE_NUMBER
HIRE_DATE           입사일
JOB_ID		직군
SALARY
COMMISSION_PCT	수당률,판매직
MANAGER_ID	직속상관 사번
DEPARTMENT_ID	부서부서 번호
---------------------------------------------------------

# SQL day 2------------------------------------------------
정렬
쿼리문의 마지막 기술
order by 컬럼명, 컬럼명[옵션],.....
order by 컬럼명, 인덱스[옵션],.....=>사용 빈도 높음
실행속도 악영향!!(정렬은 연산 리소스 높음) 
->오름차순: 기본 asc
->내림차순: desc

select last_name, hire_date
from emp
where hire_date < '05/01/01'
order by hire_date;

select last_name, hire_date
from emp
where hire_date < '05/01/01'
order by hire_date desc;

인덱스: 1,2,3.....
select last_name, hire_date
from emp
where hire_date < '05/01/01'
order by 2;

부서번호(오름), 월급(오름), 이름(내림)순으로 검색
select last_name, DEPARTMENT_ID, saladry
from emp
order by 2, 3 desc, 1;

# 쿼리 실행 순서
from -> where -> select -> order by
from -> where -> group by -> having -> select
-> order by

--이 외에 자주 사용되는 연산자
- between 값1 and 값2
- in
- like
- is NULL
- not

--between 값1 and 값2 범위 검색
-값1: 최소값, 값2: 최대값
-값1, 값2 모두 포함
10000~15000 사이의 사원명과 급여
select last_name, salary
from emp
where salary between 10000 and 15000;
where salary not between 10000 and 15000;

-- in
- 목록에서 비교
select last_name, DEPARTMENT_ID
from emp
where DEPARTMENT_ID =60 or DEPARTMENT_ID =30;

select last_name, DEPARTMENT_ID
from emp
where DEPARTMENT_ID in(60, 30);
where DEPARTMENT_ID not in(60, 30);

--like
-패턴 검색, 문자 검색에 사용
-% : 여러문자
-_ : 한 문자 대신
select last_name, email
from emp
where email like 'S%' ;
where email not like 'S%' ;

select last_name, email
from emp
where email like '%S% or email like '%k%' ;

select last_name, email
from emp
where email like '____' ;

select last_name, email
from emp
where email like 'S_I%' ;

--is (=)
-null 값 비교시 is 연산자 사용

select last_name, salary, COMMISSION_PCT
from emp
where COMMISSION_PCT is null;
where COMMISSION_PCT is not null;

##함수
- 기능 수행 명령문
- 함수명(인수, 인수...) 인수 개수는 함수에 따라 다름

#함수: 단일행 함수, 다중행 함수
-단일행 함수: 하나의 행에 대한 컬럼값 처리
-다중행 함수: 여러행의 컬럼값 처리

#문자 단일행 함수
-대문자, 소문자, 처문자만 대문자

select upper(email), lower(email), initcap(email)
from emp;

-SKING검색
-where절에서 컬럼은 인덱스 역할

select email, last_name, salary
from emp
where email = upper('sking');
(where의 인덱스==email) 풀 스캔 방지

# length
-컬럼의 길이-> 숫자(byte==8bit)
-영문자, 한글, 특수문자, 공백, 숫자 모두 1자 원칙

select email, length(email)
from emp;

select length('12가나다$%^&* 7')
from dual;
(dual: 임시 테이블)

select sysdate
from dual;

#substr
-문자 컬럼의 일부 문자만 가져오기
-substr(컬럼명, 시작위치, 가져올 문자개수)

select email, substr(email, 1, 2), substr(email, -2)
from emt;

주민번호만 남자만 검색
select *
from emp
where substr(주민번호, 8, 1) in ('1', '3');
where substr(주민면호, 3, 2) = '07'

#instr(컬럼명, 문자, 시작위치, 몇번째)
-해당 문장의 시작 인덱스
-찾는 문자가 없으면 '0'리턴

select email, instr(email, 'S')
from emp;

select email, instr(email, 'S', 1, 2)
from emp;

#문제
job_id컬럼에서 '_'이 후 두 문자 추출
select job_id, substr(job_id, instr(job_id, '_'), 2)
from emp;

select job_id, substr(job_id, instr(job_id, '_'), -2)
from emp;

select job_id, 
       substr(job_id, instr(job_id, '_'), 2) as "_뒷문자",
       substr(job_id, 1, instr(job_id, '_')) as "_앞문자"
from emp;

select job_id, 
       substr(job_id, instr(job_id, '_')+1) as "_뒷문자",
       substr(job_id, 1, instr(job_id, '_')-1) as "_앞문자"
from emp;

# LPAD(컬럼명, 전체사이즈, 채울문자)
   RPAD(컬럼명, 전체사이즈, 채울문자)
select salary, LPAD(salary, 12, '-')
from emp;

#이메일
email SKING => SKi**

select email, 
        RPAD(substr(email, 1, 3), length(email), '*')
from emp;

#trim(컬럼명)
-문자열의 앞뒤 공백 제거
-문자열 사이의 공백 유지

select trim('  Abfe  frge  ') from dual;

select trim('A' from 'Abfe  frAe  ') from dual;

------------------------------------------------------------
## 숫자함수

#round(컬럼명, 소수점 이하 표현 자릿수)
-반올림
0: 정수부분만 출력

select round(123.4567, 0) from dual;    123
select round(123.4567, -1) from dual;   120
select round(123.4567, 2) from dual;    123.5

#trunc(컬럼명, 소수점 이하 표현 자릿수)
select trunc(123.4567, 0) from dual;     123
select trunc(123.4567, -1) from dual;    120
select trunc(123.4567, 2) from dual;      123.45

## 날짜함수
-날자: 세기, 년, 월, 일, 시, 분, 초
-날자 연산 가능 : 일일 덧셈, 뺄셈
select hire_date from emp;
select hire_date, hire_date+10 from emp;
select hire_date, hire_date+10, hire_date+20 from emp;

select trunc(sysdate-to_date('1976-07-13', 'yyyy-mm-dd')) as 생존
from emp;

-add_months(월 가산)
select hire_date, add_months(hire_date, 3) from emp;

# next_day
-next_day(날자, '요일') ==> 다음 요일의 날자 리턴
요일: 일(1), 월(2), 화(3), 수(4), 목(5), 금(6), 토(7)

select sysdate, next_day(sysdate, 4) from dual;

#last_day
-해당 날자 정보의 마지막 날자

select hire_date, last_day(hire_date) from emp;

# 날자 round, trunc
-round(날자컬럼, 기준)
-기준: yy, mm, dd

select hire_date, round(hire_date, 'mm') from emp;
select hire_date, round(hire_date, 'yy') from emp;

select hire_date, trunc(hire_date, 'mm') from emp;

# extract (요소 from 날자컬럼)
-요소: year, month, day

select last_name, hire_date
from emp
where extract(year from hire_date) =2005;

------------------------------------------------------------

## 형 전환 함수
-to_char(
 to_char(컬럼, 형식)

select sysdate, to_char(sysdate, 'yy-mm-dd') from dual;
select sysdate, to_char(sysdate, 'hh:mi:ss') from dual;

select salary, to_char(salary, '$999,999)
from emp;


-to_date('문자', '날자패턴')
 to_date('2000-10-10', 'yy/mm/dd')

select salary, to_char(salary, '$999,999')
from emp;

select salary, to_char(salary, 'L999,999')
from emp;

select salary, to_char(salary, 'L9,999')
from emp;
자릿수가 모자르면 ##########

# SQL day 3===============================

# null 계열 함수
-null : 아직 입력되지 않은 값
-산술연산시 컬럼에 null포함시 결과도 null이 된다.
 논리연산시 상황에 따라 다름
 (and연산시 null, or연산시 null아닐수 있음) 

-nvl(컬럼명, 대체값)
 컬럼의 값이 null이먄 대체값으로 변경

select last_name, salary,
       salary+(salary*COMMISSION_PCT) as null
from emp;

null을 '0'으로 대체
select last_name, salary,
       salary+(salary*nvl(COMMISSION_PCT, 0)) as total
from emp;

-nvl2(컬럼명, 대체값1, 대체값2)
 대체값1: null 없을 때
 대체값2: null 있으면
select last_name, salary,COMMISSION_PCT,
       nvl2(COMMISSION_PCT, '수당있음', '수당없음') as total
from emp;

# case 문
- ANSI 표준 문 모든 DBMS에서 사용
-쿼리안에서 조건 역할

예) 이름, 부서, 월급, 상여금 출력
     부서별 상여 다르게 지급
	30부서 -> 200%
	50부서 -> 400%
	나머지 -> 100%

select last_name, DEPARTMENT_ID, salary,
        case DEPARTMENT_ID
                when 30 then salary*2
                when 50 then salary*4
        else
            salary*1
        end as bonus
from emp;
다름 표현
select last_name, DEPARTMENT_ID, salary,
        case
                when DEPARTMENT_ID=30 then salary*2
                when DEPARTMENT_ID=50 then salary*4
        else
            salary*1
        end as bonus
from emp;

select last_name, DEPARTMENT_ID, salary,
        case
                when JOB_ID like '%clerk' then salary*2
                when JOB_ID like '%man' then salary*4
        else
            salary*1
        end as bonus
from emp;

-case문은 오라클에서 decode 전용함수 있음.
-decode(컬럼, 조건값, 대체수식1, 대체수식2,......,else값)
elect last_name, DEPARTMENT_ID, salary,
        decode(DEPARTMENT_ID, 30, salary*2,
                                          50, salary*4, salary*1) as bonus
from emp;


## 다중행 함수
- sum, max, min, count, avg,...
- null값은 제외

select sum(salary)
from emp;

- count(컬럼명 또는 *)
  열의 개수, null은 제외, (*는 row개수)
select count(*)
from emp;

select count(*) as 총사원수, count(COMMISSION_PCT)
from emp;

-------------------------------------------------------------------
# 그룹
- group by 컬럼명, 컬럼명,.....

부서별 평균급여, 사원수
select DEPARTMENT_ID, avg(salary), count(*)
from emp
group by DEPARTMENT_ID
order by DEPARTMENT_ID;

select DEPARTMENT_ID,
       trunc(avg(salary),0) 부서평균급여,
       count(*) as 사원수
from emp
group by DEPARTMENT_ID
order by DEPARTMENT_ID;

-select절에 일반 컬럼은 group by 에 기술-

select DEPARTMENT_ID, job_id,
       count(*) as 사원수
from emp
group by DEPARTMENT_ID, job_id
order by DEPARTMENT_ID;

-년도별 입사사원수-
select extect(year from HIRE_DATE), 
        count(*)
from emp
group by extect(year from HIRE_DATE)
order by 1;

select to_char(HIRE_DATE, 'yyyy') as 년도,
        count(*) as 년도별사원수
from emp
group by to_char(HIRE_DATE, 'yyyy')
order by 1;

-사무직, 년도별 입사 사원수-
select to_char(HIRE_DATE, 'yyyy') as 년도,
        count(*) as 년도별사원수
from emp
where job_id like '%CLERK'
group by to_char(HIRE_DATE, 'yyyy')
order by 1;

# 그룹을 제한
-원하는 그룹 출력
-having 조건문 and 조건문
-단독사용 안됨

select to_char(HIRE_DATE, 'yyyy') as 년도,
        count(*) as 년도별사원수
from emp
group by to_char(HIRE_DATE, 'yyyy')
having count(*) >= 10
order by 1;

-where: 행에 대한 조건
-having: 열에 대한 조건(그룹열에 대한 조건)

-스키마: 주문[주문번호, 주문자, 주문상품, 개수, 주문금액, 주문일]
-문제 조건: 올 해 주문자료만 있는 테이블에서
1. 월별 주문금액 합계
select to_char(주문일, 'mm'), sum(주문금액)
from 주문
group by to_char(주문일, 'mm')

select extract(month from 주문일) as 월
         sum(주문금액) as 월매출액
from 주문
select extract(month from 주문일)
order by 1;

2. 100개 이상 팔린 상품, 주문 총개수
select 주문상품, sum(개수)
from 주문
group by 주문상품
having 개수 >= 100;

select 주문상품,
        sum(개수), 상품별총개수
from 주문
group by 주문상품
having sum(개수) >= 100
order by 2 desc;

3. 5번 이상 주문한 주문자와 주문횟수
select 주문자, 개수
from 주문
group by 주문자
having 개수 >= 5;

select 주문자,
        count(*) as 주문회수
from 주문
group by 주문자
having count(*) >= 5
order by 2 desc;

4. 지난달 100개 이상 팔린 상품과 주문총개수
select 주문상품,
        sum(개수), 상품별총개수
from 주문
where extract(month from 주문일) = extract(month from sysdate)-1
group by 주문상품
having sum(개수) >= 100
order by 2 desc;



select name, birth,
       extract(year from sysdate)-extract(year from birth) as 나이,
       count(*) as 인원수
from tt
group by trunc(extract(year from sysdate)-extract(year from birth), -1);


## join
- 연관이 있는 테이블로부터 데이터를 검색
-테이블과 테이블

이름, 월급: emp 테이블(DEPARTMENT_ID 존재)
부서명: dept 테이블(DEPARTMENT_ID 존재)

이름, 월급, 부서명(DEPARTMENT_NAME) 검색은?
DEPARTMENT_ID로 join하여 부서명 검색 가능

select last_name, salary, department_name
from emp, dept
where emp.department_id=dept.department_id;
(오라클 전용 join)

-join 종류: cross join, equi join등가조인, non equi join 비등가조인
              outer join, self join

-cross join: 조인 조건 없음, 모든 경우수로 조인, 사용 X
select last_name, salary, department_name
from emp, dept;
==> 107x27 조인 경우의 수로 조인

-equi join: 조인 조건 있음, where에 기입
select last_name, salary, department_name
from emp, dept
where emp.department_id=dept.department_id;

-outer join 외부조건: 조건을 만족하지 않는 행도 수용
	-left outer join
	-right outer join
	-full outer join

-left outer join => 실무에서 많이 사용
select last_name, salary, department_name
from emp(left), dept
where emp.department_id=dept.department_id(+);
(emp의 부서번호는 모두 나오는 것을 기준으로
   dept의 부서번호도 모두 나오도록 한다.)

-right outer join => 실무에서 많이 사용
select last_name, salary, department_name
from emp(left), dept
where emp.department_id(+)=dept.department_id;
(dept의 부서번호는 모두 나오는 것을 기준으로
   emp의 부서번호도 모두 나오도록 한다.)






